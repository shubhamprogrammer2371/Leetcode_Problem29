int divide(long long int dividend, long long int divisor){
    return (dividend / divisor > pow(2,31) - 1) ? (pow(2,31) - 1) : (dividend / divisor);
}


------------------------------------------------------------------------------------------------------

int divide(long long int dividend, long long int divisor){
    int ans = 0, sign = dividend > 0 == divisor > 0 ? 1 : -1;
    if (divisor == INT_MIN)   // corner cases for using integer and not long:
        return dividend == divisor;

    if (dividend == INT_MIN) 
    {
        if (divisor == 1)
            return INT_MIN;
        else if (divisor == -1) 
            return INT_MAX;
        else 
            dividend += abs(divisor), ans++;
    }

    // Perform the division iteratively, by using bit shifting and subtraction:
    // We are looking for the largest powers of 2 (i) such that A shifted right by i bits is still greater than or equal to B.
    dividend = abs(dividend), divisor = abs(divisor);    
    for (int i = 0; dividend >= divisor; i = 0) 
    {
        while ((dividend >> i) >= divisor)
            i++;
        
        dividend -= divisor << i - 1;  // This is equivalent to subtracting B * (2^(i-1)) from A.
        ans += 1 << i - 1;  // Add 2^(i-1) to the result
    }

    return sign < 0 ? -ans : ans;
}
